// Generated by view binder compiler. Do not edit!
package com.mik.recyloc.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mik.recyloc.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddlocdialogBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout dialogFragment;

  @NonNull
  public final CheckBox radioButtonBattery;

  @NonNull
  public final CheckBox radioButtonComposite;

  @NonNull
  public final CheckBox radioButtonGlass;

  @NonNull
  public final CheckBox radioButtonPaper;

  @NonNull
  public final CheckBox radioButtonPlastic;

  @NonNull
  public final TextView textAttributes;

  private FragmentAddlocdialogBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout dialogFragment, @NonNull CheckBox radioButtonBattery,
      @NonNull CheckBox radioButtonComposite, @NonNull CheckBox radioButtonGlass,
      @NonNull CheckBox radioButtonPaper, @NonNull CheckBox radioButtonPlastic,
      @NonNull TextView textAttributes) {
    this.rootView = rootView;
    this.dialogFragment = dialogFragment;
    this.radioButtonBattery = radioButtonBattery;
    this.radioButtonComposite = radioButtonComposite;
    this.radioButtonGlass = radioButtonGlass;
    this.radioButtonPaper = radioButtonPaper;
    this.radioButtonPlastic = radioButtonPlastic;
    this.textAttributes = textAttributes;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddlocdialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddlocdialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_addlocdialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddlocdialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout dialogFragment = (ConstraintLayout) rootView;

      id = R.id.radioButtonBattery;
      CheckBox radioButtonBattery = ViewBindings.findChildViewById(rootView, id);
      if (radioButtonBattery == null) {
        break missingId;
      }

      id = R.id.radioButtonComposite;
      CheckBox radioButtonComposite = ViewBindings.findChildViewById(rootView, id);
      if (radioButtonComposite == null) {
        break missingId;
      }

      id = R.id.radioButtonGlass;
      CheckBox radioButtonGlass = ViewBindings.findChildViewById(rootView, id);
      if (radioButtonGlass == null) {
        break missingId;
      }

      id = R.id.radioButtonPaper;
      CheckBox radioButtonPaper = ViewBindings.findChildViewById(rootView, id);
      if (radioButtonPaper == null) {
        break missingId;
      }

      id = R.id.radioButtonPlastic;
      CheckBox radioButtonPlastic = ViewBindings.findChildViewById(rootView, id);
      if (radioButtonPlastic == null) {
        break missingId;
      }

      id = R.id.textAttributes;
      TextView textAttributes = ViewBindings.findChildViewById(rootView, id);
      if (textAttributes == null) {
        break missingId;
      }

      return new FragmentAddlocdialogBinding((ConstraintLayout) rootView, dialogFragment,
          radioButtonBattery, radioButtonComposite, radioButtonGlass, radioButtonPaper,
          radioButtonPlastic, textAttributes);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
